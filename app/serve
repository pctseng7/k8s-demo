#!/usr/bin/env python3
import logging
import subprocess
import os
import sys
import signal
from inference.environment import HostEnvironment


env = HostEnvironment()
logger = logging.getLogger(__name__)


def _launch_gunicorn():
    
    """Configure and launch the Gunicorn web server 
    """
    
    gunicorn_bind_address = '0.0.0.0:8080'

    logger.info("starting gunicorn")
    gunicorn_pid = subprocess.Popen(["gunicorn",
                                        "--timeout", str(env.server_worker_timeout),
                                        "-k", "gevent",
                                        "-b", gunicorn_bind_address,
                                        "--worker-connections", str(1000 * env.server_worker_num),
                                        "-w", str(env.server_worker_num),
                                        "inference.wsgi:app"]).pid

    logger.info("PID: {}, Inference Engine Started.".format(gunicorn_pid))
    
    return gunicorn_pid


def _signalHandler(processId):
    for pid in processId:
        try:
            os.kill(pid, signal.SIGTERM)
        except OSError:
            pass
    sys.exit(0)


def startInference():
    pids = set()
    gunicorn_pid = _launch_gunicorn()
    pids.add(gunicorn_pid)
    logger.info("Start Inference Engine PID: {}".format(gunicorn_pid))
    signal.signal(signal.SIGTERM, lambda a, b: _signalHandler(pids))

    while True:
        pid, _ = os.wait()
        if pid in pids:
            break

    _signalHandler(pids)

if __name__ == '__main__':
    try:
        startInference()
    except Exception as e:
        logger.error(e)